✅
INFO:Detectors:
Pair.flashLoan(IERC3156FlashBorrower,address,uint256,bytes) (src/Pair.sol#272-304) uses arbitrary from in transferFrom: IERC20(token).safeTransferFrom(address(receiver),address(this),amount + calculatedLoanFee) (src/Pair.sol#295)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#arbitrary-from-in-transferfrom

✅
INFO:Detectors:
Pair._update(uint256,uint256,uint256,uint256) (src/Pair.sol#66-92) uses a weak PRNG: "blockTimestamp = uint32(block.timestamp % 2 ** 32) (src/Pair.sol#71)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG

✅
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) has bitwise-xor operator ^ instead of the exponentiation operator **: 
         - inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation

✅
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse = (3 * denominator) ^ 2 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#184)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#188)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#189)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#190)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#191)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#192)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - denominator = denominator / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#169)
        - inverse *= 2 - denominator * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#193)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) performs a multiplication on the result of a division:
        - prod0 = prod0 / twos (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#172)
        - result = prod0 * inverse (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#199)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply

✅
INFO:Detectors:
Pair.burn(address) (src/Pair.sol#163-186) uses a dangerous strict equality:
        - amount0 == 0 || amount1 == 0 (src/Pair.sol#174)
Pair.mint(address) (src/Pair.sol#126-155) uses a dangerous strict equality:
        - _totalSupply == 0 (src/Pair.sol#136)
Pair.mint(address) (src/Pair.sol#126-155) uses a dangerous strict equality:
        - liquidity == 0 (src/Pair.sol#148)
Pair.swap(uint256,uint256,address,bytes) (src/Pair.sol#194-242) uses a dangerous strict equality:
        - amount0In == 0 && amount1In == 0 (src/Pair.sol#229)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities

✅
INFO:Detectors:
Reentrancy in Pair._update(uint256,uint256,uint256,uint256) (src/Pair.sol#66-92):
        External calls:
        - gt(UD60x18.wrap(balance0),MAX_WHOLE_UD60x18) || gt(UD60x18.wrap(balance1),MAX_WHOLE_UD60x18) (src/Pair.sol#67)
                - result = x.unwrap() > y.unwrap() (lib/prb-math/src/ud60x18/Helpers.sol#29)
        - price0CumulativeLast += udReserve1.div(udReserve0).unwrap() * timeElapsed (src/Pair.sol#82)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        - price1CumulativeLast += udReserve0.div(udReserve1).unwrap() * timeElapsed (src/Pair.sol#83)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        State variables written after the call(s):
        - blockTimestampLast = blockTimestamp (src/Pair.sol#89)
        Pair.blockTimestampLast (src/Pair.sol#46) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
Reentrancy in Pair.burn(address) (src/Pair.sol#163-186):
        External calls:
        - IERC20(token0).safeTransfer(to,amount0) (src/Pair.sol#177)
        - IERC20(token1).safeTransfer(to,amount1) (src/Pair.sol#178)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#182)
                - result = x.unwrap() > y.unwrap() (lib/prb-math/src/ud60x18/Helpers.sol#29)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        State variables written after the call(s):
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#182)
                - blockTimestampLast = blockTimestamp (src/Pair.sol#89)
        Pair.blockTimestampLast (src/Pair.sol#46) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
        - kLast = reserve0.unwrap() * reserve1.unwrap() (src/Pair.sol#183)
        Pair.kLast (src/Pair.sol#50) can be used in cross function reentrancies:
        - Pair.kLast (src/Pair.sol#50)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#182)
                - reserve0 = UD60x18.wrap(balance0) (src/Pair.sol#87)
        Pair.reserve0 (src/Pair.sol#44) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#182)
                - reserve1 = UD60x18.wrap(balance1) (src/Pair.sol#88)
        Pair.reserve1 (src/Pair.sol#45) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
Reentrancy in Pair.mint(address) (src/Pair.sol#126-155):
        External calls:
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#151)
                - result = x.unwrap() > y.unwrap() (lib/prb-math/src/ud60x18/Helpers.sol#29)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        State variables written after the call(s):
        - kLast = reserve0.unwrap() * reserve1.unwrap() (src/Pair.sol#152)
        Pair.kLast (src/Pair.sol#50) can be used in cross function reentrancies:
        - Pair.kLast (src/Pair.sol#50)
Reentrancy in Pair.swap(uint256,uint256,address,bytes) (src/Pair.sol#194-242):
        External calls:
        - IERC20(token0).safeTransfer(to,amount0Out) (src/Pair.sol#215)
        - IERC20(token1).safeTransfer(to,amount1Out) (src/Pair.sol#216)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#240)
                - result = x.unwrap() > y.unwrap() (lib/prb-math/src/ud60x18/Helpers.sol#29)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        State variables written after the call(s):
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#240)
                - blockTimestampLast = blockTimestamp (src/Pair.sol#89)
        Pair.blockTimestampLast (src/Pair.sol#46) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#240)
                - reserve0 = UD60x18.wrap(balance0) (src/Pair.sol#87)
        Pair.reserve0 (src/Pair.sol#44) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
        - _update(balance0,balance1,_reserve0.unwrap(),_reserve1.unwrap()) (src/Pair.sol#240)
                - reserve1 = UD60x18.wrap(balance1) (src/Pair.sol#88)
        Pair.reserve1 (src/Pair.sol#45) can be used in cross function reentrancies:
        - Pair.getReserves() (src/Pair.sol#336-340)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1

✅
INFO:Detectors:
FlashBorrower.flashBorrow(address,uint256) (src/mock/FlashLoanBorrowers.sol#34-40) ignores return value by IERC20(token).approve(address(lender),_allowance + _repayment) (src/mock/FlashLoanBorrowers.sol#38)
FlashBorrower.flashBorrow(address,uint256) (src/mock/FlashLoanBorrowers.sol#34-40) ignores return value by lender.flashLoan(IERC3156FlashBorrower(address(this)),token,amount,) (src/mock/FlashLoanBorrowers.sol#39)
InvalidFlashBorrower2.flashBorrow(address,uint256) (src/mock/FlashLoanBorrowers.sol#73-79) ignores return value by IERC20(token).approve(address(lender),_allowance + _repayment) (src/mock/FlashLoanBorrowers.sol#77)
InvalidFlashBorrower2.flashBorrow(address,uint256) (src/mock/FlashLoanBorrowers.sol#73-79) ignores return value by lender.flashLoan(IERC3156FlashBorrower(address(this)),token,amount,) (src/mock/FlashLoanBorrowers.sol#78)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return

✅
INFO:Detectors:
ERC20Permit.constructor(string).name (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#39) shadows:
        - ERC20.name() (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#58-60) (function)
        - IERC20Metadata.name() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)
Factory.constructor(address)._owner (src/Factory.sol#17) shadows:
        - Ownable._owner (lib/openzeppelin-contracts/contracts/access/Ownable.sol#21) (state variable)
Pair.mint(address)._totalSupply (src/Pair.sol#135) shadows:
        - ERC20._totalSupply (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#39) (state variable)
Pair.burn(address)._totalSupply (src/Pair.sol#170) shadows:
        - ERC20._totalSupply (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#39) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing

✅
INFO:Detectors:
Ownable2Step.transferOwnership(address).newOwner (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#35) lacks a zero-check on :
                - _pendingOwner = newOwner (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#36)
Factory.setFeeTo(address).feeTo_ (src/Factory.sol#49) lacks a zero-check on :
                - _feeTo = feeTo_ (src/Factory.sol#50)
Pair.constructor(address,address)._token0 (src/Pair.sol#52) lacks a zero-check on :
                - token0 = _token0 (src/Pair.sol#54)
Pair.constructor(address,address)._token1 (src/Pair.sol#52) lacks a zero-check on :
                - token1 = _token1 (src/Pair.sol#55)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation

✅
INFO:Detectors:
Reentrancy in Pair._update(uint256,uint256,uint256,uint256) (src/Pair.sol#66-92):
        External calls:
        - gt(UD60x18.wrap(balance0),MAX_WHOLE_UD60x18) || gt(UD60x18.wrap(balance1),MAX_WHOLE_UD60x18) (src/Pair.sol#67)
                - result = x.unwrap() > y.unwrap() (lib/prb-math/src/ud60x18/Helpers.sol#29)
        - price0CumulativeLast += udReserve1.div(udReserve0).unwrap() * timeElapsed (src/Pair.sol#82)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        - price1CumulativeLast += udReserve0.div(udReserve1).unwrap() * timeElapsed (src/Pair.sol#83)
                - result = wrap(Common.mulDiv(x.unwrap(),uUNIT,y.unwrap())) (lib/prb-math/src/ud60x18/Math.sol#100)
        State variables written after the call(s):
        - reserve0 = UD60x18.wrap(balance0) (src/Pair.sol#87)
        - reserve1 = UD60x18.wrap(balance1) (src/Pair.sol#88)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2

✅
INFO:Detectors:
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#44-67) uses timestamp for comparisons
        Dangerous comparisons:
        - block.timestamp > deadline (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#53)
Pair._update(uint256,uint256,uint256,uint256) (src/Pair.sol#66-92) uses timestamp for comparisons
        Dangerous comparisons:
        - timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0 (src/Pair.sol#77)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp

✅
INFO:Detectors:
Address._revert(bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#146-158) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Address.sol#151-154)
ShortStrings.toString(ShortString) (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#63-73) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#68-71)
StorageSlot.getAddressSlot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#59-64) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#61-63)
StorageSlot.getBooleanSlot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#69-74) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#71-73)
StorageSlot.getBytes32Slot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#79-84) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#81-83)
StorageSlot.getUint256Slot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#89-94) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#91-93)
StorageSlot.getStringSlot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#99-104) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#101-103)
StorageSlot.getStringSlot(string) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#109-114) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#111-113)
StorageSlot.getBytesSlot(bytes32) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#119-124) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#121-123)
StorageSlot.getBytesSlot(bytes) (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#129-134) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#131-133)
Strings.toString(uint256) (lib/openzeppelin-contracts/contracts/utils/Strings.sol#24-44) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Strings.sol#30-32)
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/Strings.sol#36-38)
ECDSA.tryRecover(bytes32,bytes) (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#56-73) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#64-68)
MessageHashUtils.toEthSignedMessageHash(bytes32) (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#30-37) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#32-36)
MessageHashUtils.toTypedDataHash(bytes32,bytes32) (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#76-85) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#78-84)
Math.mulDiv(uint256,uint256,uint256) (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#123-202) uses assembly
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#130-133)
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#154-161)
        - INLINE ASM (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#167-176)
Factory.createPair(address,address) (src/Factory.sol#25-43) uses assembly
        - INLINE ASM (src/Factory.sol#34-36)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage

✅
INFO:Detectors:
Different versions of Solidity are used:
        - Version used: ['0.8.21', '>=0.8.19', '^0.8.20']
        - 0.8.21 (src/Factory.sol#2)
        - 0.8.21 (src/Pair.sol#2)
        - 0.8.21 (src/ShareToken.sol#2)
        - 0.8.21 (src/interfaces/ICallee.sol#2)
        - 0.8.21 (src/interfaces/IFactory.sol#2)
        - 0.8.21 (src/interfaces/IPair.sol#2)
        - 0.8.21 (src/mock/FlashLoanBorrowers.sol#2)
        - 0.8.21 (src/mock/Tokens.sol#2)
        - >=0.8.19 (lib/prb-math/src/Common.sol#2)
        - >=0.8.19 (lib/prb-math/src/UD60x18.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd1x18/Casting.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd1x18/Constants.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd1x18/Errors.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd1x18/ValueType.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/Casting.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/Constants.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/Errors.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/Helpers.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/Math.sol#2)
        - >=0.8.19 (lib/prb-math/src/sd59x18/ValueType.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud2x18/Casting.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud2x18/Constants.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud2x18/Errors.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud2x18/ValueType.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Casting.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Constants.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Conversions.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Errors.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Helpers.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/Math.sol#2)
        - >=0.8.19 (lib/prb-math/src/ud60x18/ValueType.sol#2)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol#3)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Nonces.sol#3)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#5)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4)
        - ^0.8.20 (lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used

✅
INFO:Detectors:
exp2(uint256) (lib/prb-math/src/Common.sol#54-292) has a high cyclomatic complexity (73).
log10(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#363-459) has a high cyclomatic complexity (80).
log10(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#270-367) has a high cyclomatic complexity (81).
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#cyclomatic-complexity

✅
INFO:Detectors:
abs(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#32-38) is never used and should be removed
add(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#8-10) is never used and should be removed
add(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#8-10) is never used and should be removed
and(SD59x18,int256) (lib/prb-math/src/sd59x18/Helpers.sol#13-15) is never used and should be removed
and(UD60x18,uint256) (lib/prb-math/src/ud60x18/Helpers.sol#13-15) is never used and should be removed
and2(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#18-20) is never used and should be removed
and2(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#18-20) is never used and should be removed
avg(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Math.sol#49-68) is never used and should be removed
avg(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Math.sol#48-54) is never used and should be removed
ceil(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#81-100) is never used and should be removed
ceil(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#67-83) is never used and should be removed
convert(UD60x18) (lib/prb-math/src/ud60x18/Conversions.sol#12-14) is never used and should be removed
convert(uint256) (lib/prb-math/src/ud60x18/Conversions.sol#23-30) is never used and should be removed
div(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Math.sol#121-150) is never used and should be removed
eq(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#23-25) is never used and should be removed
eq(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#23-25) is never used and should be removed
exp(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#168-181) is never used and should be removed
exp(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#115-128) is never used and should be removed
exp2(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#201-227) is never used and should be removed
exp2(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#141-154) is never used and should be removed
exp2(uint256) (lib/prb-math/src/Common.sol#54-292) is never used and should be removed
floor(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#240-259) is never used and should be removed
floor(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#162-170) is never used and should be removed
frac(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#266-268) is never used and should be removed
frac(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#177-181) is never used and should be removed
gm(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Math.sol#283-307) is never used and should be removed
gm(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Math.sol#192-210) is never used and should be removed
gt(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#28-30) is never used and should be removed
gte(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#33-35) is never used and should be removed
gte(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#33-35) is never used and should be removed
intoInt256(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#15-17) is never used and should be removed
intoSD1x18(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#23-32) is never used and should be removed
intoSD1x18(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#15-21) is never used and should be removed
intoSD1x18(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#17-23) is never used and should be removed
intoSD59x18(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#13-15) is never used and should be removed
intoSD59x18(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#25-27) is never used and should be removed
intoSD59x18(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#39-45) is never used and should be removed
intoUD2x18(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#19-25) is never used and should be removed
intoUD2x18(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#38-47) is never used and should be removed
intoUD2x18(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#28-34) is never used and should be removed
intoUD60x18(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#30-36) is never used and should be removed
intoUD60x18(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#52-58) is never used and should be removed
intoUD60x18(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#31-33) is never used and should be removed
intoUint128(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#52-58) is never used and should be removed
intoUint128(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#75-84) is never used and should be removed
intoUint128(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#37-39) is never used and should be removed
intoUint128(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#56-62) is never used and should be removed
intoUint256(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#41-47) is never used and should be removed
intoUint256(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#63-69) is never used and should be removed
intoUint256(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#43-45) is never used and should be removed
intoUint256(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#49-51) is never used and should be removed
intoUint40(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#64-73) is never used and should be removed
intoUint40(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#90-99) is never used and should be removed
intoUint40(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#50-56) is never used and should be removed
intoUint40(UD60x18) (lib/prb-math/src/ud60x18/Casting.sol#67-73) is never used and should be removed
inv(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#320-322) is never used and should be removed
inv(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#223-227) is never used and should be removed
isZero(SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#38-40) is never used and should be removed
isZero(UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#38-41) is never used and should be removed
ln(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#340-344) is never used and should be removed
ln(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#245-251) is never used and should be removed
log10(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#363-459) is never used and should be removed
log10(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#270-367) is never used and should be removed
log2(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#484-533) is never used and should be removed
log2(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#392-432) is never used and should be removed
lshift(SD59x18,uint256) (lib/prb-math/src/sd59x18/Helpers.sol#43-45) is never used and should be removed
lshift(UD60x18,uint256) (lib/prb-math/src/ud60x18/Helpers.sol#44-46) is never used and should be removed
lt(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#48-50) is never used and should be removed
lt(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#49-51) is never used and should be removed
lte(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#53-55) is never used and should be removed
lte(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#54-56) is never used and should be removed
mod(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#58-60) is never used and should be removed
mod(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#59-61) is never used and should be removed
msb(uint256) (lib/prb-math/src/Common.sol#320-369) is never used and should be removed
mul(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Math.sol#549-578) is never used and should be removed
mul(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Math.sol#449-451) is never used and should be removed
mulDiv18(uint256,uint256) (lib/prb-math/src/Common.sol#495-526) is never used and should be removed
mulDivSigned(int256,int256,int256) (lib/prb-math/src/Common.sol#545-582) is never used and should be removed
neq(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#63-65) is never used and should be removed
neq(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#64-66) is never used and should be removed
not(SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#68-70) is never used and should be removed
not(UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#69-71) is never used and should be removed
or(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#73-75) is never used and should be removed
or(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#74-76) is never used and should be removed
pow(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Math.sol#597-621) is never used and should be removed
pow(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Math.sol#481-513) is never used and should be removed
powu(SD59x18,uint256) (lib/prb-math/src/sd59x18/Math.sol#640-671) is never used and should be removed
powu(UD60x18,uint256) (lib/prb-math/src/ud60x18/Math.sol#531-546) is never used and should be removed
rshift(SD59x18,uint256) (lib/prb-math/src/sd59x18/Helpers.sol#78-80) is never used and should be removed
rshift(UD60x18,uint256) (lib/prb-math/src/ud60x18/Helpers.sol#79-81) is never used and should be removed
sd(int256) (lib/prb-math/src/sd59x18/Casting.sol#102-104) is never used and should be removed
sd1x18(int64) (lib/prb-math/src/sd1x18/Casting.sol#76-78) is never used and should be removed
sd59x18(int256) (lib/prb-math/src/sd59x18/Casting.sol#107-109) is never used and should be removed
sqrt(SD59x18) (lib/prb-math/src/sd59x18/Math.sol#688-703) is never used and should be removed
sqrt(UD60x18) (lib/prb-math/src/ud60x18/Math.sol#561-572) is never used and should be removed
sqrt(uint256) (lib/prb-math/src/Common.sol#595-672) is never used and should be removed
sub(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#83-85) is never used and should be removed
sub(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#84-86) is never used and should be removed
ud2x18(uint64) (lib/prb-math/src/ud2x18/Casting.sol#59-61) is never used and should be removed
ud60x18(uint256) (lib/prb-math/src/ud60x18/Casting.sol#81-83) is never used and should be removed
unary(SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#88-90) is never used and should be removed
uncheckedAdd(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#93-97) is never used and should be removed
uncheckedAdd(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#89-93) is never used and should be removed
uncheckedSub(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#100-104) is never used and should be removed
uncheckedSub(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#96-100) is never used and should be removed
uncheckedUnary(SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#107-111) is never used and should be removed
unwrap(SD1x18) (lib/prb-math/src/sd1x18/Casting.sol#81-83) is never used and should be removed
unwrap(SD59x18) (lib/prb-math/src/sd59x18/Casting.sol#112-114) is never used and should be removed
unwrap(UD2x18) (lib/prb-math/src/ud2x18/Casting.sol#64-66) is never used and should be removed
wrap(int256) (lib/prb-math/src/sd59x18/Casting.sol#117-119) is never used and should be removed
wrap(int64) (lib/prb-math/src/sd1x18/Casting.sol#86-88) is never used and should be removed
wrap(uint64) (lib/prb-math/src/ud2x18/Casting.sol#69-71) is never used and should be removed
xor(SD59x18,SD59x18) (lib/prb-math/src/sd59x18/Helpers.sol#114-116) is never used and should be removed
xor(UD60x18,UD60x18) (lib/prb-math/src/ud60x18/Helpers.sol#103-105) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code

✅
INFO:Detectors:
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/access/Ownable.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashBorrower.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC3156FlashLender.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Address.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Context.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Nonces.sol#3) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol#5) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/Strings.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/math/Math.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version^0.8.20 (lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol#4) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/Common.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/UD60x18.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd1x18/Casting.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd1x18/Constants.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd1x18/Errors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd1x18/ValueType.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/Casting.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/Constants.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/Errors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/Helpers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/Math.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/sd59x18/ValueType.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud2x18/Casting.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud2x18/Constants.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud2x18/Errors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud2x18/ValueType.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Casting.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Constants.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Conversions.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Errors.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Helpers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/Math.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version>=0.8.19 (lib/prb-math/src/ud60x18/ValueType.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/Factory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/Pair.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/ShareToken.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/interfaces/ICallee.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/interfaces/IFactory.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/interfaces/IPair.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/mock/FlashLoanBorrowers.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (src/mock/Tokens.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
solc-0.8.21 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity

✅
INFO:Detectors:
Low level call in SafeERC20._callOptionalReturnBool(IERC20,bytes) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#110-117):
        - (success,returndata) = address(token).call(data) (lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol#115)
Low level call in Address.sendValue(address,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#41-50):
        - (success) = recipient.call{value: amount}() (lib/openzeppelin-contracts/contracts/utils/Address.sol#46)
Low level call in Address.functionCallWithValue(address,bytes,uint256) (lib/openzeppelin-contracts/contracts/utils/Address.sol#83-89):
        - (success,returndata) = target.call{value: value}(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#87)
Low level call in Address.functionStaticCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#95-98):
        - (success,returndata) = target.staticcall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#96)
Low level call in Address.functionDelegateCall(address,bytes) (lib/openzeppelin-contracts/contracts/utils/Address.sol#104-107):
        - (success,returndata) = target.delegatecall(data) (lib/openzeppelin-contracts/contracts/utils/Address.sol#105)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls

✅
INFO:Detectors:
Function ERC20Permit.DOMAIN_SEPARATOR() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Permit.sol#80-82) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() (lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol#89) is not in mixedCase
Function EIP712._EIP712Name() (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#146-148) is not in mixedCase
Function EIP712._EIP712Version() (lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol#157-159) is not in mixedCase
Parameter Factory.allPairs(uint256)._index (src/Factory.sol#80) is not in mixedCase
Function IPair.MINIMUM_LIQUIDITY() (src/interfaces/IPair.sol#19) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions

✅
INFO:Detectors:
Variable Pair.swap(uint256,uint256,address,bytes).balance0Adjusted (src/Pair.sol#232) is too similar to Pair.swap(uint256,uint256,address,bytes).balance1Adjusted (src/Pair.sol#233)
Variable Pair.price0CumulativeLast (src/Pair.sol#48) is too similar to Pair.price1CumulativeLast (src/Pair.sol#49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#variable-names-too-similar

✅
INFO:Detectors:
ShortStrings.slitherConstructorConstantVariables() (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#40-123) uses literals with too many digits:
        - FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF (lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol#42)
Factory.createPair(address,address) (src/Factory.sol#25-43) uses literals with too many digits:
        - bytecode = abi.encodePacked(type()(Pair).creationCode,abi.encode(token0,token1)) (src/Factory.sol#31)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits

✅
INFO:Detectors:
FlashBorrower.lender (src/mock/FlashLoanBorrowers.sol#10) should be immutable 
InvalidFlashBorrower2.lender (src/mock/FlashLoanBorrowers.sol#57) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable